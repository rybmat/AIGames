/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package put.ai.snort.snortgui;

import java.awt.Color;
import java.awt.EventQueue;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
import put.ai.snort.cleave.CleaveBoardFactory;
import put.ai.snort.dominion.DominionBoardFactory;
import put.ai.snort.engine.BoardFactory;
import put.ai.snort.engine.JarPlayerLoader;
import put.ai.snort.game.Board;
import put.ai.snort.engine.Callback;
import put.ai.snort.engine.GameEngine;
import put.ai.snort.game.Player;
import put.ai.snort.engine.impl.GameEngineImpl;
import put.ai.snort.engine.parameters.IntegerParameter;
import put.ai.snort.engine.parameters.Parameter;
import put.ai.snort.fission.FissionBoardFactory;
import put.ai.snort.game.Move;
import put.ai.snort.game.impl.SnortBoardFactory;
import put.ai.snort.linesofaction.LoABoardFactory;

public class MainWindow extends javax.swing.JFrame {

    private JFileChooser fileDialog;
    private Player[] players;
    private BoardFactory boardFactory = new LoABoardFactory();
//    private BoardFactory boardFactory = new SnortBoardFactory();
//    private BoardFactory boardFactory = new FissionBoardFactory();
//    private BoardFactory boardFactory = new CleaveBoardFactory();
//    private BoardFactory boardFactory = new DominionBoardFactory();

    public MainWindow() {
        initComponents();
        fileDialog = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Pliki JAR", "jar");
        fileDialog.setFileFilter(filter);
        this.boardSize.setEnabled(false);
        for (Parameter<?> p : boardFactory.getConfigurationOptions()) {
            if (BoardFactory.BOARD_SIZE.equals(p.getName())) {
                this.boardSize.setEnabled(true);
                IntegerParameter ip = (IntegerParameter) p;
                Comparable<Integer> min = ip.hasMin() ? ip.getMin() : 1;
                Comparable<Integer> max = ip.hasMax() ? (Integer) ip.getMax() : null;
                SpinnerNumberModel model = new SpinnerNumberModel(ip.getDefaultValue(), min, max, 1);
                this.boardSize.setModel(model);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        boardView = new BoardViewPanel();
        gameInfo = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        nextPlayer = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        player1 = new javax.swing.JTextField();
        player2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        runGame = new javax.swing.JButton();
        selectPlayer1File = new javax.swing.JButton();
        selectPlayer2File = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        boardSize = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        timeout = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout boardViewLayout = new javax.swing.GroupLayout(boardView);
        boardView.setLayout(boardViewLayout);
        boardViewLayout.setHorizontalGroup(
            boardViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 805, Short.MAX_VALUE)
        );
        boardViewLayout.setVerticalGroup(
            boardViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 479, Short.MAX_VALUE)
        );

        jLabel5.setText("Następny gracz:");

        javax.swing.GroupLayout gameInfoLayout = new javax.swing.GroupLayout(gameInfo);
        gameInfo.setLayout(gameInfoLayout);
        gameInfoLayout.setHorizontalGroup(
            gameInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gameInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nextPlayer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        gameInfoLayout.setVerticalGroup(
            gameInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nextPlayer)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boardView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(gameInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boardView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gameInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Gra", jPanel2);

        jLabel1.setForeground(new java.awt.Color(255, 200, 0));
        jLabel1.setText("Gracz 1:");

        jLabel2.setForeground(new java.awt.Color(0, 0, 255));
        jLabel2.setText("Gracz 2:");

        runGame.setText("Uruchom grę");
        runGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runGameActionPerformed(evt);
            }
        });

        selectPlayer1File.setText("...");
        selectPlayer1File.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectPlayer1FileActionPerformed(evt);
            }
        });

        selectPlayer2File.setText("...");
        selectPlayer2File.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectPlayer2FileActionPerformed(evt);
            }
        });

        jLabel3.setText("Rozmiar planszy:");

        boardSize.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(10), Integer.valueOf(2), null, Integer.valueOf(1)));

        jLabel4.setText("Czas na ruch [ms]:");

        timeout.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(20000), Integer.valueOf(1), null, Integer.valueOf(100)));

        jLabel6.setText("<html>\nW polach <code>Gracz 1</code> i <code>Gracz 2</code> należy wskazać pliki JAR z klasami implementującymi sztuczną inteligencję.<br />\nŻeby taka klasa mogła zostać wykorzystana jako gracz muszą być spełnione dwa warunki:\n<ul>\n<li>musi implementować intefejs <code>Player</code></li>\n<li>musi być oznaczona w manifeście pliku JAR jako <code>Main-Class</code></li>\n</ul>\nŻeby samodzielnie zagrać w grę należy zostawić pole odpowiedniego gracza puste.\n</html>");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(player2))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(player1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectPlayer1File)
                            .addComponent(selectPlayer2File, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(runGame)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(timeout, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                    .addComponent(boardSize)))
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 248, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(player1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectPlayer1File))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(player2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectPlayer2File))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(boardSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(timeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(runGame)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(221, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Ustawienia", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private int getColorIndex(Player.Color player) {
        return (player == Player.Color.PLAYER1 ? 0 : 1);
    }

    private String getColorName(Player.Color player) {
        String[] color = new String[]{"pomarańczowy", "niebieski"};
        return color[getColorIndex(player)];
    }

    private Color getPlayerColor(Player.Color player) {
        switch (player) {
            default:
            case EMPTY:
                return Color.GRAY;
            case PLAYER1:
                return Color.ORANGE;
            case PLAYER2:
                return Color.BLUE;
        }
    }

    private void announceWinner(Player.Color winner) {
        int index = getColorIndex(winner);
        String text = String.format("Wygrał %s (%s)", players[index].getName(), getColorName(winner));
        JOptionPane.showMessageDialog(MainWindow.this, text, "Koniec gry", JOptionPane.INFORMATION_MESSAGE);
    }

    private void updateNextPlayer(Player.Color nextPlayer) {
        this.nextPlayer.setText(getColorName(nextPlayer));
        this.nextPlayer.setForeground(getPlayerColor(nextPlayer));
    }

    private void runGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runGameActionPerformed
        try {
            jTabbedPane1.setEnabledAt(1, false);
            final GameEngine g = setupGame();
            new SwingWorker<Player.Color, Object>() {
                @Override
                protected Player.Color doInBackground() throws Exception {
                    Player.Color result = g.play(new Callback() {
                        @Override
                        public void update(final Player.Color nextPlayer, final Board b, final Move m) {
                            EventQueue.invokeLater(new Runnable() {
                                public void run() {
                                    updateNextPlayer(nextPlayer);
                                    ((BoardViewPanel) boardView).updateBoard(b, m);
                                }
                            });
                        }
                    });
                    return result;
                }

                @Override
                protected void done() {
                    try {
                        ((BoardViewPanel) boardView).clearFieldMouseListeners();
                        jTabbedPane1.setEnabledAt(1, true);
                        announceWinner(this.get());
                    } catch (InterruptedException | ExecutionException ex) {
                        JOptionPane.showMessageDialog(MainWindow.this, ex, "Bład gry", JOptionPane.ERROR_MESSAGE);
                        Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }.execute();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex, "Bład gry", JOptionPane.ERROR_MESSAGE);
        }
        this.jTabbedPane1.setSelectedIndex(0);
    }//GEN-LAST:event_runGameActionPerformed

    private void selectPlayerFile(JTextField textField) {
        fileDialog.setSelectedFile(new File(textField.getText()).getAbsoluteFile());
        if (fileDialog.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                textField.setText(fileDialog.getSelectedFile().getCanonicalPath());
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void selectPlayer1FileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectPlayer1FileActionPerformed
        selectPlayerFile(player1);
    }//GEN-LAST:event_selectPlayer1FileActionPerformed

    private void selectPlayer2FileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectPlayer2FileActionPerformed
        selectPlayerFile(player2);
    }//GEN-LAST:event_selectPlayer2FileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner boardSize;
    private javax.swing.JPanel boardView;
    private javax.swing.JPanel gameInfo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel nextPlayer;
    private javax.swing.JTextField player1;
    private javax.swing.JTextField player2;
    private javax.swing.JButton runGame;
    private javax.swing.JButton selectPlayer1File;
    private javax.swing.JButton selectPlayer2File;
    private javax.swing.JSpinner timeout;
    // End of variables declaration//GEN-END:variables

    private static Class<? extends Player> getClass(JTextField textField) {
        String jar = textField.getText();
        if (!jar.isEmpty()) {
            return JarPlayerLoader.load(jar);
        } else {
            return null;
        }
    }

    private GameEngine setupGame() throws InstantiationException, IllegalAccessException {
        Class<? extends Player>[] cl = new Class[]{
            getClass(player1),
            getClass(player2),};
        int boardSize = ((SpinnerNumberModel) this.boardSize.getModel()).getNumber().intValue();
        Map<String, Object> config = new HashMap<>();
        config.put(BoardFactory.BOARD_SIZE, boardSize);
        boardFactory.configure(config);
        GameEngine g = new GameEngineImpl(boardFactory);
        g.setTimeout(((SpinnerNumberModel) timeout.getModel()).getNumber().intValue());
        players = new Player[cl.length];
        for (int i = 0; i < cl.length; ++i) {
            if (cl[i] != null) {
                players[i] = cl[i].newInstance();
            } else {
                players[i] = new ArtificialArtificialIntelligence((BoardViewPanel) this.boardView);
            }
            g.addPlayer(players[i]);
        }
        return g;
    }
}
